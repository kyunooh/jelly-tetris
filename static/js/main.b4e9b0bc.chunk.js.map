{"version":3,"sources":["tetris/types.js","tetris/actions.js","tetris/operations.js","reducers/tetrisReducer.js","rootReducer.js","sagas.js","initializeStore.js","playview/Row.js","playview/GameOver.js","playview/PlayView.js","playview/PlayViewContainer.js","information/InformationWindow.js","information/InformationWindowContainer.js","App.js","serviceWorker.js","index.js"],"names":["TICK","ROTATE","DROP","RESET","HOLD","tick","createAction","moveLeft","moveRight","rotate","drop","reset","hold","initialState","existTetris","localStorage","getItem","JSON","parse","newBlock","gameOver","dropping","canHold","removedLines","levels","currentBlock","currentBlockNumber","nextBlock","nextBlockNumber","holdBlock","temporaryHoldBlockNumber","currentBlockLocation","grid","Array","fill","tetriminos","0","1","2","3","4","5","6","setCurrentLocation","state","findLeftUpper","r","length","c","canNotRotate","newGrid","cr","cc","doRotate","rotatedTetrimino","w","h","tetrimino","i","row","j","push","rotateBlock","cStep","arguments","undefined","rStep","copyGrid","Object","toConsumableArray","objectSpread","map","arr","slice","isEndTick","column","doTick","setItem","stringify","Math","floor","random","block","createNewBlock","filled","removeLines","splice","unshift","clearInterval","reservedTick","setInterval","pow","cellIsCurrentBlock","cell","handleActions","_handleActions","defineProperty","needChange","doMoveLeft","originValue","doMoveRight","doDrop","doReset","doHold","createReducer","asyncReducers","combineReducers","tetrisReducer","tickSaga","watchTickSaga","rootSaga","delay","ms","Promise","res","setTimeout","regenerator_default","a","wrap","_context","prev","next","select","sent","put","stop","_marked","_context2","takeLatest","_marked2","_context3","all","_marked3","initializeStore","sagaMiddleware","createSagaMiddleware","store","createStore","compose","applyMiddleware","injectReducer","key","reducer","replaceReducer","run","Row","props","rows","cells","keyName","concat","react_default","createElement","className","playview_GameOver","id","PlayView","tickTimer","document","onkeydown","e","playview_Row","connect","dispatch","terisActions","type","playview_PlayView","InformationWindow","blockGird","blockGrid","style","width","height","onClick","controls","autoPlay","loop","src","tetrisActions","src_information_InformationWindow","getElementById","focus","App","es","playview_PlayViewContainer","information_InformationWindowContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kVAAaA,EAAO,oBAGPC,EAAS,sBACTC,EAAO,oBACPC,EAAQ,qBACRC,EAAO,oCCFPC,EAAOC,YAAaN,GACpBO,EAAWD,YDJC,yBCKZE,EAAYF,YDJC,0BCKbG,EAASH,YAAaL,GACtBS,EAAOJ,YAAaJ,GACpBS,EAAQL,YAAaH,GACrBS,EAAON,YAAaF,GCPpBS,EAAe,WAC1B,IAAMC,EAAcC,aAAaC,QAFd,gBAGnB,OAAIF,EACKG,KAAKC,MAAMJ,GAEb,CACLK,UAAU,EACVC,UAAU,EACVC,UAAU,EACVT,MAAM,EACNU,SAAS,EACTC,aAAc,EACdC,OAAQ,EACRC,aAAc,GACdC,oBAAqB,EACrBC,UAAW,GACXC,iBAAkB,EAClBC,UAAW,GACXC,yBAA0B,EAC1BC,qBAAsB,CAAC,EAAG,GAC1BC,KAAMC,MAAM,IAAIC,KAAKD,MAAM,IAAIC,KAAK,MAOlCC,EAAa,CACjBC,EAAG,CAAC,CAAC,GAAI,GAAI,GAAI,KACjBC,EAAG,CAAC,CAAC,GAAI,GAAI,IAAK,CAAC,EAAG,EAAG,KACzBC,EAAG,CAAC,CAAC,GAAI,GAAI,IAAK,CAAC,GAAI,EAAG,IAC1BC,EAAG,CAAC,CAAC,GAAI,IAAK,CAAC,GAAI,KACnBC,EAAG,CAAC,CAAC,GAAI,GAAI,IAAK,CAAC,EAAG,GAAI,IAC1BC,EAAG,CAAC,CAAC,GAAI,GAAI,GAAI,CAAC,EAAG,GAAI,KACzBC,EAAG,CAAC,CAAC,EAAG,GAAI,IAAK,CAAC,GAAI,GAAI,KAQtBC,EAAqB,SAAAC,GAEzB,IADA,IAAIC,GAAgB,EACXC,EAAI,EAAGA,EAAIF,EAAMZ,KAAKe,OAAQD,IAAK,CAC1C,IAAK,IAAIE,EAAI,EAAGA,EAAIJ,EAAMZ,KAAKc,GAAGC,OAAQC,IACxC,GAAIJ,EAAMZ,KAAKc,GAAGE,GAAK,GAAI,CACzBJ,EAAMb,qBAAuB,CAACe,EAAGE,GACjCH,GAAgB,EAChB,MAGJ,GAAIA,EAAe,QAIvB,SAASI,EAAaC,EAASJ,EAAGK,EAAIH,EAAGI,GACvC,OACEN,EAAIK,GAAMD,EAAQH,QAClBC,EAAII,GAAMF,EAAQ,GAAGH,QACrBG,EAAQJ,EAAIK,GAAIH,EAAII,GAIxB,IA2CaC,EAAW,SAAAT,GAMtB,IALA,IAAMU,EAAmB,GACnBC,EAAIX,EAAMnB,aAAasB,OACvBS,EAAIZ,EAAMnB,aAAa,GAAGsB,OAC1BU,EAAYb,EAAMnB,aAEfiC,EAAI,EAAGA,EAAIF,EAAGE,IAAK,CAE1B,IADA,IAAMC,EAAM,GACHC,EAAI,EAAGA,EAAIL,EAAGK,IACrBD,EAAIE,KAAKJ,EAAUF,GAAKA,EAAIK,EAAI,GAAK,GAAGJ,EAAIE,EAAI,IAElDJ,EAAiBO,KAAKF,GAGxB,OAzDkB,SAAdG,EAAelB,EAAOU,GAA2C,IAAzBS,EAAyBC,UAAAjB,OAAA,QAAAkB,IAAAD,UAAA,GAAAA,UAAA,GAAjB,EAAGE,EAAcF,UAAAjB,OAAA,QAAAkB,IAAAD,UAAA,GAAAA,UAAA,GAAN,EAC/D,GAAID,GAAS,EAAb,CACE,GAAIG,EAAQ,EACV,OAEFJ,EAAYlB,EAAOU,GAAmB,EAAGY,EAAQ,QAGnD,GAAIA,EAAQ,EACNH,EAAQ,GACVD,EAAYlB,EAAOU,GAAmB,QAI1C,GAAIS,EAAQ,EACVD,EAAYlB,EAAOU,EAAkB,EAAGY,EAAQ,OADlD,CAMA,IADA,IAAMhB,EAAUiB,EAASvB,EAAMZ,MACtBc,EAAI,EAAGA,EAAII,EAAQH,OAAQD,IAClC,IAAK,IAAIE,EAAI,EAAGA,EAAIE,EAAQJ,GAAGC,OAAQC,IACjCE,EAAQJ,GAAGE,GAAK,KAClBE,EAAQJ,GAAGE,GAAK,GAOtB,IAFA,IAAMG,EAAKP,EAAMb,qBAAqB,GAAKmC,EACrCd,EAAKR,EAAMb,qBAAqB,GAAKgC,EAClCjB,EAAI,EAAGA,EAAIQ,EAAiBP,OAAQD,IAC3C,IAAK,IAAIE,EAAI,EAAGA,EAAIM,EAAiBR,GAAGC,OAAQC,IAAK,CACnD,GAAIC,EAAaC,EAASJ,EAAGK,EAAIH,EAAGI,GAGlC,YAFgBU,EAAYlB,EAAOU,EAA/BS,GAAS,EAAwCA,EAAQ,EACnBA,EAAQ,EADcG,GAIlEhB,EAAQJ,EAAIK,GAAIH,EAAII,GAAME,EAAiBR,GAAGE,GAGlDJ,EAAMnB,aAAe6B,EACrBV,EAAMZ,KAANoC,OAAAC,EAAA,EAAAD,CAAiBlB,IAejBY,CAAYlB,EAAOU,GACZc,OAAAE,EAAA,EAAAF,CAAA,GAAIxB,IAoCPuB,EAAW,SAAAnC,GAAI,OACnBA,EAAKuC,IAAI,SAAAC,GACP,OAAOA,EAAIC,WAGf,SAASC,EAAUf,EAAKf,EAAOM,EAASyB,GACtC,OACEhB,IAAQf,EAAMZ,KAAKe,OAAS,GAC3BG,EAAQS,EAAM,GAAGgB,GAAU,IAAMzB,EAAQS,EAAM,GAAGgB,GAAU,EAI1D,MAOMC,EAAS,SAATA,EAAShC,GACpB7B,aAAa8D,QAlLM,eAkLgB5D,KAAK6D,UAAUlC,IAClD,IAAIM,EAAUiB,EAASvB,EAAMZ,MAC7B,GAAIY,EAAMzB,SAQR,OAhEmB,SAACa,EAAMY,GAC5B,GAAkC,IAA9BA,EAAMnB,aAAasB,OACrBH,EAAMlB,mBAAqBqD,KAAKC,MAAsB,EAAhBD,KAAKE,UAC3CrC,EAAMnB,aAAN2C,OAAAC,EAAA,EAAAD,CAAyBjC,EAAWS,EAAMlB,qBAC1CkB,EAAMhB,gBAAkBmD,KAAKC,MAAsB,EAAhBD,KAAKE,UACxCrC,EAAMjB,UAANyC,OAAAC,EAAA,EAAAD,CAAsBjC,EAAWS,EAAMhB,uBAClC,GAAIgB,EAAMhC,MAAQgC,EAAMf,UAAUkB,OAAS,EAChDH,EAAMd,yBAA2Bc,EAAMlB,mBACvCkB,EAAMnB,aAAN2C,OAAAC,EAAA,EAAAD,CAAyBxB,EAAMf,gBAC1B,GAAIe,EAAMhC,KAAM,CACrBgC,EAAMd,yBAA2Bc,EAAMlB,mBACvCkB,EAAMnB,aAAN2C,OAAAC,EAAA,EAAAD,CAAyBxB,EAAMjB,WAC/BiB,EAAMlB,mBAAqBkB,EAAMhB,gBACjCgB,EAAMhB,gBAAkBmD,KAAKC,MAAsB,EAAhBD,KAAKE,UACxC,IAAMC,EAAQ/C,EAAWS,EAAMhB,iBAC/BgB,EAAMjB,UAANyC,OAAAC,EAAA,EAAAD,CAAsBc,OAEjB,CACLtC,EAAMnB,aAAN2C,OAAAC,EAAA,EAAAD,CAAyBxB,EAAMjB,WAC/BiB,EAAMlB,mBAAqBkB,EAAMhB,gBACjCgB,EAAMhB,gBAAkBmD,KAAKC,MAAsB,EAAhBD,KAAKE,UACxC,IAAMC,EAAQ/C,EAAWS,EAAMhB,iBAC/BgB,EAAMjB,UAANyC,OAAAC,EAAA,EAAAD,CAAsBc,GAGxB,IAAK,IAAIvB,EAAM,EAAGA,EAAMf,EAAMnB,aAAasB,OAAQY,IACjD,IAAK,IAAIgB,EAAS,EAAGA,EAAS/B,EAAMnB,aAAakC,GAAKZ,OAAQ4B,IACxD3C,EAAK2B,GAAKgB,EA9HJ,GA8HwB,GAAK3C,EAAK2B,GAAKgB,EA9HvC,GA8H2D,KACnE/B,EAAMxB,UAAW,GACnBY,EAAK2B,GAAKgB,EAhIA,GAgIoB/B,EAAMnB,aAAakC,GAAKgB,GA4BxDQ,CAAejC,EAASN,GACxBA,EAAMzB,UAAW,EACjByB,EAAMvB,UAAW,EACZuB,EAAMhC,OAAMgC,EAAMtB,SAAU,GACjCsB,EAAMhC,MAAO,EACbgC,EAAMZ,KAAOkB,EACbP,EAAmBC,GACZwB,OAAAE,EAAA,EAAAF,CAAA,GAAIxB,GAEb,IAAK,IAAIe,EAAMT,EAAQH,OAAS,EAAGY,GAAO,EAAGA,IAC3C,IAAK,IAAIgB,EAAS,EAAGA,EAASzB,EAAQS,GAAKZ,OAAQ4B,IACjD,GAAIzB,EAAQS,GAAKgB,GAAU,GAAI,CAC7B,GAAID,EAAUf,EAAKf,EAAOM,EAASyB,GAAS,CAC1CzB,EAAUiB,EAASvB,EAAMZ,MACzBY,EAAMzB,UAAW,EAEjB,IAAK,IAAI2B,EAAI,EAAGA,EAAII,EAAQH,OAAQD,IAGlC,IAFA,IAAMa,EAAMT,EAAQJ,GAChBsC,GAAS,EACJpC,EAAI,EAAGA,EAAIW,EAAIZ,OAAQC,IAC1BW,EAAIX,IAAMW,EAAIX,GAAK,KAAIW,EAAIX,IAAM,IAChCW,EAAIX,KAAIoC,GAAS,GAClBA,GAAUpC,IAAMW,EAAIZ,OAAS,GAC/BsC,EAAYnC,EAASJ,EAAGF,GAK9B,OADAA,EAAMZ,KAAOkB,EACN0B,EAAOhC,GAEhBM,EAAQS,EAAM,GAAGgB,GAAUzB,EAAQS,GAAKgB,GACxCzB,EAAQS,GAAKgB,GAAU,EAO7B,OAFA/B,EAAMZ,KAAOkB,EACbP,EAAmBC,GACZwB,OAAAE,EAAA,EAAAF,CAAA,GAAIxB,IAEPyC,EAAc,SAACrD,EAAM2B,EAAKf,GAC9BZ,EAAKsD,OAAO3B,EAAK,GACjB3B,EAAKuD,QAAQtD,MAAM,IAAIC,KAAK,IAC5BU,EAAMrB,cAAgB,EAClBqB,EAAMrB,aAAe,IAAM,IAC7BiE,cAAc5C,EAAM6C,cACpB7C,EAAMpB,QAAU,EAChBoB,EAAM6C,aAAeC,YAAY,WAC/BrF,KACC,IAAO0E,KAAKY,IAAI,IAAM/C,EAAMpB,WAG7BoE,EAAqB,SAAAC,GACzB,OAAOA,EAAO,ICvODC,eAAaC,EAAA,GAAA3B,OAAA4B,EAAA,EAAA5B,CAAA2B,EAEvB/F,EAAO,SAAA4C,GAAK,OAAIgC,EAAOhC,KAFAwB,OAAA4B,EAAA,EAAA5B,CAAA2B,EHJH,wBGOR,SAAAnD,GAAK,ODsOI,SAAAA,GAGxB,IAFA,IAAMM,EAAUiB,EAASvB,EAAMZ,MAC3BiE,GAAa,EACRnD,EAAII,EAAQH,OAAS,EAAGD,GAAK,EAAGA,IAEvC,IADA,IAAMa,EAAMT,EAAQJ,GACXE,EAAI,EAAGA,EAAIW,EAAIZ,OAAQC,IAC1B4C,EAAmBjC,EAAIX,MACN,IAAfW,EAAIX,EAAI,IACVE,EAAQJ,GAAGE,EAAI,GAAKE,EAAQJ,GAAGE,GAC/BE,EAAQJ,GAAGE,GAAK,GAEhBiD,GAAa,GAQrB,OAFIA,IAAYrD,EAAMZ,KAAOkB,GAC7BP,EAAmBC,GACZwB,OAAAE,EAAA,EAAAF,CAAA,GAAIxB,GCzPasD,CAAWtD,KAHTwB,OAAA4B,EAAA,EAAA5B,CAAA2B,EHHF,yBGOR,SAAAnD,GAAK,OD0PI,SAAAA,GAIzB,IAHA,IAAMM,EAAUiB,EAASvB,EAAMZ,MAC3BiE,GAAa,EAERnD,EAAII,EAAQH,OAAS,EAAGD,GAAK,EAAGA,IAEvC,IADA,IAAMa,EAAMT,EAAQJ,GACXE,EAAIW,EAAIZ,OAAS,EAAGC,GAAK,EAAGA,IACnC,GAAI4C,EAAmBjC,EAAIX,IACzB,GAAmB,IAAfW,EAAIX,EAAI,GAAU,CACpB,IAAMmD,EAAcjD,EAAQJ,GAAGE,GAC/BE,EAAQJ,GAAGE,GAAK,EAChBE,EAAQJ,GAAGE,EAAI,GAAKmD,OAEpBF,GAAa,EAQrB,OAFIA,IAAYrD,EAAMZ,KAAOkB,GAC7BP,EAAmBC,GACZwB,OAAAE,EAAA,EAAAF,CAAA,GAAIxB,GC/QcwD,CAAYxD,KAJXwB,OAAA4B,EAAA,EAAA5B,CAAA2B,EAKvB9F,EAAS,SAAA2C,GAAK,OAAIS,EAAST,KALJwB,OAAA4B,EAAA,EAAA5B,CAAA2B,EAMvB7F,EAAO,SAAA0C,GAAK,ODiKK,SAAAA,GAEpB,IADAA,EAAMvB,UAAW,EACVuB,EAAMvB,UACXuB,EAAQgC,EAAOhC,GAEjB,OAAOwB,OAAAE,EAAA,EAAAF,CAAA,GAAIxB,GCtKQyD,CAAOzD,KANAwB,OAAA4B,EAAA,EAAA5B,CAAA2B,EAOvB5F,EAAQ,SAAAyC,GAAK,OD4BK,SAAAA,GAGrB,OAFA4C,cAAc5C,EAAM6C,cACpB1E,aAAa8D,QAxCM,eAwCgB,IAC5BhE,IC/BayF,CAAQ1D,KAPFwB,OAAA4B,EAAA,EAAA5B,CAAA2B,EAQvB3F,EAAO,SAAAwC,GAAK,OD6QK,SAACA,GACrB,IAAKA,EAAMtB,QAAS,OAAO8C,OAAAE,EAAA,EAAAF,CAAA,GAAIxB,GAC/BA,EAAMtB,SAAU,EAChBsB,EAAMhC,MAAO,EACb,IAAK,IAAIkC,EAAI,EAAGA,EAAIF,EAAMZ,KAAKe,OAAQD,IACrC,IAAK,IAAIE,EAAI,EAAGA,EAAIJ,EAAMZ,KAAKc,GAAGC,OAAQC,IACpCJ,EAAMZ,KAAKc,GAAGE,GAAK,KAAIJ,EAAMZ,KAAKc,GAAGE,GAAK,GAOlD,OAHAJ,EAAMzB,UAAW,GACjByB,EAAQgC,EAAOhC,IACTf,UAAYM,EAAWS,EAAMd,0BAC5Bc,EC1RY2D,CAAO3D,KARAmD,GAU1BlF,KCNa2F,EANO,SAAAC,GAAa,OACjCC,YAAgBtC,OAAAE,EAAA,EAAAF,CAAA,CACduC,iBACGF,iDCDUG,cAOAC,cAIAC,GAbXC,EAAQ,SAAAC,GAAE,OAAI,IAAIC,QAAQ,SAAAC,GAAG,OAAIC,WAAWD,EAAKF,MAEhD,SAAUJ,IAAV,IAAApF,EAAA,OAAA4F,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACU,OADVF,EAAAE,KAAA,EACgBC,YAAO,SAAC9E,GAAD,OAAWA,EAAM+D,cAAcnF,SADtD,OAGL,OAFMA,EADD+F,EAAAI,KAAAJ,EAAAE,KAAA,EAGCV,EAAM,IAAOhC,KAAKY,IAAI,IAAMnE,IAH7B,OAIL,OAJK+F,EAAAE,KAAA,EAICG,YAAIvH,KAJL,wBAAAkH,EAAAM,SAAAC,GAOA,SAAUjB,IAAV,OAAAO,EAAAC,EAAAC,KAAA,SAAAS,GAAA,cAAAA,EAAAP,KAAAO,EAAAN,MAAA,OACL,OADKM,EAAAN,KAAA,EACCO,YAAW,aAAc,kBAAMpB,MADhC,wBAAAmB,EAAAF,SAAAI,GAIA,SAAUnB,IAAV,OAAAM,EAAAC,EAAAC,KAAA,SAAAY,GAAA,cAAAA,EAAAV,KAAAU,EAAAT,MAAA,OACL,OADKS,EAAAT,KAAA,EACCU,YAAI,CAACtB,MADN,wBAAAqB,EAAAL,SAAAO,GCXP,IAkBeC,EAlBS,WACtB,IAAMC,EAAiBC,cACjBC,EAAQC,YACZjC,IACAkC,YAAQC,YAAgBL,KAW1B,OATAE,EAAM/B,cAAgB,GAEtB+B,EAAMI,cAAgB,SAACC,EAAKC,GAC1BN,EAAM/B,cAAcoC,GAAOC,EAC3BN,EAAMO,eAAevC,EAAcgC,EAAM/B,iBAG3C6B,EAAeU,IAAIlC,GAEZ0B,uBCmBMS,MApCf,SAAaC,GAAO,IACVlH,EAASkH,EAATlH,KACFmH,EAAO,GAEb,SAASxE,EAAOhB,GAEd,IADA,IAAIyF,EAAQ,GACHzE,EAAS,EAAGA,EAAS3C,EAAK2B,GAAKZ,OAAQ4B,IAAU,CACxD,IAAM0E,EAAO,GAAAC,OAAM3F,EAAN,KAAA2F,OAAa3E,GACtB3C,EAAK2B,GAAKgB,GACZyE,EAAMvF,KACJ0F,EAAAlC,EAAAmC,cAAA,QAAMC,UAAS,aAAAH,OAAetH,EAAK2B,GAAKgB,IAAWkE,IAAKQ,GAAxD,SAKFD,EAAMvF,KACJ0F,EAAAlC,EAAAmC,cAAA,QAAMC,UAAU,aAAaZ,IAAKQ,GAAlC,SAMN,OAAOD,EAGT,IAAK,IAAIzF,EAAM,EAAGA,EAAM3B,EAAKe,OAAQY,IACnCwF,EAAKtF,KACH0F,EAAAlC,EAAAmC,cAAA,OAAKC,UAAU,MAAMZ,IAAKlF,GACvBgB,EAAOhB,KAKd,OAAOwF,GCjCMO,SAAA,kBAAMH,EAAAlC,EAAAmC,cAAA,OAAKG,GAAG,aAAR,eCoCNC,MAlCf,SAAkBV,GAChB,IAAMlH,EAAOkH,EAAMlH,KA6BnB,OA5BAkH,EAAMW,UAAUX,EAAM1H,QAEtBsI,SAASC,UAAY,SAAAC,GACL,cAAVA,EAAEnB,KACJK,EAAM3I,WAGM,eAAVyJ,EAAEnB,KACJK,EAAM1I,YAGM,cAAVwJ,EAAEnB,KACJK,EAAM7I,OAGK,YAAV2J,EAAEnB,KACHK,EAAMzI,SAGK,MAAVuJ,EAAEnB,KACHK,EAAMxI,OAGK,UAAVsJ,EAAEnB,KACHK,EAAMtI,QAIH2I,EAAAlC,EAAAmC,cAAA,OAAKC,UAAU,aAAaP,EAAM9H,SAAWmI,EAAAlC,EAAAmC,cAACE,EAAD,MAAeH,EAAAlC,EAAAmC,cAACS,EAAD,CAAKjI,KAAMA,MCYjEkI,eACb,SAAAtH,GAAK,OAAAwB,OAAAE,EAAA,EAAAF,CAAA,GAAUxB,EAAM+D,gBACrB,SAAAwD,GAAQ,MAAK,CACX9J,KAAM,kBAAM8J,EAASC,MACrB7J,SAAU,kBAAM4J,EAASC,MACzB5J,UAAW,kBAAM2J,EAASC,MAC1B3J,OAAQ,kBAAM0J,EAASC,MACvB1J,KAAM,kBAAMyJ,EAASC,MACrBP,UAAW,SAAArI,GAAM,OAAI2I,EAAS,CAAEE,KAAM,aAAc7I,YACpDZ,KAAM,kBAAMuJ,EAASC,QATVF,CA1CW,SAAAhB,GAyBxB,OACEK,EAAAlC,EAAAmC,cAACc,EAAD,CACEjK,KA1Be,WACjB6I,EAAM7I,QA0BJE,SAxBmB,WACrB2I,EAAM3I,YAwBJC,UAtBoB,WACtB0I,EAAM1I,aAsBJC,OApBiB,WACnByI,EAAMzI,UAoBJC,KAlBe,WACjBwI,EAAMxI,QAkBJmJ,UAfc,SAAArI,GAChB0H,EAAMW,UAAUrI,IAedZ,KAZe,WACjBsI,EAAMtI,QAYJoB,KAAMkH,EAAMlH,KACZR,OAAQ0H,EAAM1H,OACdJ,SAAU8H,EAAM9H,SAChBqE,aAAcyD,EAAMzD,iBCDX8E,UArCW,SAAArB,GACxB,IAAMsB,EAAY,SAAAtF,GAQhB,IAPA,IACMuF,EAAY,CAChB,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,IAEN3H,EAAI,EAAGA,EAAIoC,EAAMnC,OAAQD,IAChC,IAAK,IAAIE,EAAI,EAAGA,EAAIkC,EAAMpC,GAAGC,OAAQC,IACnCyH,EAAU3H,EATE,GASWE,EATX,GAS0BkC,EAAMpC,GAAGE,GAGnD,OAAOyH,GAGT,OACElB,EAAAlC,EAAAmC,cAAA,OAAKG,GAAG,sBACNJ,EAAAlC,EAAAmC,cAACS,EAAD,CAAKjI,KAAMwI,EAAUtB,EAAMvH,aAC3B4H,EAAAlC,EAAAmC,cAAA,mBACAD,EAAAlC,EAAAmC,cAACS,EAAD,CAAKjI,KAAMwI,EAAUtB,EAAMrH,aAC3B0H,EAAAlC,EAAAmC,cAAA,mBAEAD,EAAAlC,EAAAmC,cAAA,OAAKG,GAAG,iBAAR,UAAgCT,EAAM3H,cACtCgI,EAAAlC,EAAAmC,cAAA,OAAKG,GAAG,UAAR,UAAyBT,EAAM1H,QAC/B+H,EAAAlC,EAAAmC,cAAA,UAAQG,GAAG,gBAAgBe,MAAO,CAAEC,MAAO,MAAOC,OAAQ,SAC1DrB,EAAAlC,EAAAmC,cAAA,UAAQC,UAAU,eAAeoB,QAAS3B,EAAMvI,OAAhD,SACA4I,EAAAlC,EAAAmC,cAAA,OAAKG,GAAG,eACNJ,EAAAlC,EAAAmC,cAAA,SAAOsB,UAAQ,EAACC,UAAU,EAAMC,MAAI,GAClCzB,EAAAlC,EAAAmC,cAAA,UAAQyB,IAAI,2BAA2BZ,KAAK,kCCTvCH,eACb,SAAAtH,GAAK,OAAAwB,OAAAE,EAAA,EAAAF,CAAA,GAASxB,EAAM+D,gBACpB,SAAAwD,GAAQ,MAAK,CACXxJ,MAAO,kBAAMwJ,EAASe,QAHXhB,CAnBoB,SAAAhB,GAOjC,OACEK,EAAAlC,EAAAmC,cAAC2B,GAAD,CACExJ,UAAWuH,EAAMvH,UACjBE,UAAWqH,EAAMrH,UACjBN,aAAc2H,EAAM3H,aACpBC,OAAQ0H,EAAM1H,OACdb,MAXgB,WAChBuI,EAAMvI,QACNmJ,SAASsB,eAAe,iBAAiBC,aCFzC7C,GAAQH,IAaCiD,OAXf,WACE,OACE/B,EAAAlC,EAAAmC,cAAC+B,EAAA,EAAD,CAAU/C,MAAOA,IACfe,EAAAlC,EAAAmC,cAAA,OAAKC,UAAU,OACbF,EAAAlC,EAAAmC,cAACgC,GAAD,MACAjC,EAAAlC,EAAAmC,cAACiC,GAAD,SCHYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAlC,EAAAmC,cAACyC,GAAD,MAASnC,SAASsB,eAAe,SD2H3C,kBAAmBc,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b4e9b0bc.chunk.js","sourcesContent":["export const TICK = \"jelly-tetris/tick\";\nexport const MOVE_LEFT = \"jelly-tetris/moveLeft\";\nexport const MOVE_RIGHT = \"jelly-tetris/moveRight\";\nexport const ROTATE = \"jelly-tetris/rotate\";\nexport const DROP = \"jelly-tetris/drop\";\nexport const RESET = \"jelly-tetris/reset\";\nexport const HOLD = \"jelly-tetris/hold\";\n\n\n","import {createAction, handleActions} from \"redux-actions\";\nimport {DROP, HOLD, MOVE_LEFT, MOVE_RIGHT, RESET, ROTATE, TICK} from \"./types\";\n\n\nexport const tick = createAction(TICK);\nexport const moveLeft = createAction(MOVE_LEFT);\nexport const moveRight = createAction(MOVE_RIGHT);\nexport const rotate = createAction(ROTATE);\nexport const drop = createAction(DROP);\nexport const reset = createAction(RESET);\nexport const hold = createAction(HOLD);\n\n","import {tick} from \"./actions\";\n\nconst JELLY_TETRIS = \"jelly-tetris\";\nexport const initialState = () => {\n  const existTetris = localStorage.getItem(JELLY_TETRIS);\n  if (existTetris) {\n    return JSON.parse(existTetris);\n  }\n  return {\n    newBlock: true,\n    gameOver: false,\n    dropping: false,\n    hold: false,\n    canHold: true,\n    removedLines: 0,\n    levels: 1,\n    currentBlock: [],\n    currentBlockNumber: -1,\n    nextBlock: [],\n    nextBlockNumber: -1,\n    holdBlock: [],\n    temporaryHoldBlockNumber: 0,\n    currentBlockLocation: [0, 0],\n    grid: Array(16).fill(Array(10).fill(0))\n  };\n};\n\nconst padding = 3;\n\n// I J L O T Z S\nconst tetriminos = {\n  0: [[11, 11, 11, 11]],\n  1: [[12, 12, 12], [0, 0, 12]],\n  2: [[13, 13, 13], [13, 0, 0]],\n  3: [[14, 14], [14, 14]],\n  4: [[15, 15, 15], [0, 15, 0]],\n  5: [[16, 16, 0], [0, 16, 16]],\n  6: [[0, 17, 17], [17, 17, 0]]\n};\n\nexport const doReset = state => {\n  clearInterval(state.reservedTick);\n  localStorage.setItem(JELLY_TETRIS, \"\");\n  return initialState();\n};\nconst setCurrentLocation = state => {\n  let findLeftUpper = false;\n  for (let r = 0; r < state.grid.length; r++) {\n    for (let c = 0; c < state.grid[r].length; c++) {\n      if (state.grid[r][c] > 10) {\n        state.currentBlockLocation = [r, c];\n        findLeftUpper = true;\n        break;\n      }\n    }\n    if (findLeftUpper) break;\n  }\n};\n\nfunction canNotRotate(newGrid, r, cr, c, cc) {\n  return (\n    r + cr >= newGrid.length ||\n    c + cc >= newGrid[0].length ||\n    newGrid[r + cr][c + cc]\n  );\n}\n\nconst rotateBlock = (state, rotatedTetrimino, cStep = 0, rStep = 0) => {\n  if (cStep < -3) {\n    if (rStep > 2) {\n      return;\n    }\n    rotateBlock(state, rotatedTetrimino, -1, rStep + 1);\n    return;\n  }\n  if (rStep > 2) {\n    if (cStep > 0) {\n      rotateBlock(state, rotatedTetrimino, -1);\n    }\n    return;\n  }\n  if (cStep > 3) {\n    rotateBlock(state, rotatedTetrimino, 0, rStep + 1);\n    return;\n  }\n\n  const newGrid = copyGrid(state.grid);\n  for (let r = 0; r < newGrid.length; r++) {\n    for (let c = 0; c < newGrid[r].length; c++) {\n      if (newGrid[r][c] > 10) {\n        newGrid[r][c] = 0;\n      }\n    }\n  }\n  // current coordinate\n  const cr = state.currentBlockLocation[0] + rStep;\n  const cc = state.currentBlockLocation[1] + cStep;\n  for (let r = 0; r < rotatedTetrimino.length; r++) {\n    for (let c = 0; c < rotatedTetrimino[r].length; c++) {\n      if (canNotRotate(newGrid, r, cr, c, cc)) {\n        if (cStep >= 0) rotateBlock(state, rotatedTetrimino, cStep + 1, rStep);\n        else rotateBlock(state, rotatedTetrimino, cStep - 1, rStep);\n        return;\n      }\n      newGrid[r + cr][c + cc] = rotatedTetrimino[r][c];\n    }\n  }\n  state.currentBlock = rotatedTetrimino;\n  state.grid = [...newGrid];\n};\nexport const doRotate = state => {\n  const rotatedTetrimino = [];\n  const w = state.currentBlock.length;\n  const h = state.currentBlock[0].length;\n  const tetrimino = state.currentBlock;\n\n  for (let i = 0; i < h; i++) {\n    const row = [];\n    for (let j = 0; j < w; j++) {\n      row.push(tetrimino[w - (w - j - 1) - 1][h - i - 1]);\n    }\n    rotatedTetrimino.push(row);\n  }\n  rotateBlock(state, rotatedTetrimino);\n  return {...state};\n};\nconst createNewBlock = (grid, state) => {\n  if (state.currentBlock.length === 0) {\n    state.currentBlockNumber = Math.floor(Math.random() * 7);\n    state.currentBlock = [...tetriminos[state.currentBlockNumber]];\n    state.nextBlockNumber = Math.floor(Math.random() * 7);\n    state.nextBlock = [...tetriminos[state.nextBlockNumber]];\n  } else if (state.hold && state.holdBlock.length > 0) {\n    state.temporaryHoldBlockNumber = state.currentBlockNumber;\n    state.currentBlock = [...state.holdBlock];\n  } else if (state.hold) {\n    state.temporaryHoldBlockNumber = state.currentBlockNumber;\n    state.currentBlock = [...state.nextBlock];\n    state.currentBlockNumber = state.nextBlockNumber;\n    state.nextBlockNumber = Math.floor(Math.random() * 7);\n    const block = tetriminos[state.nextBlockNumber];\n    state.nextBlock = [...block];\n\n  } else {\n    state.currentBlock = [...state.nextBlock];\n    state.currentBlockNumber = state.nextBlockNumber;\n    state.nextBlockNumber = Math.floor(Math.random() * 7);\n    const block = tetriminos[state.nextBlockNumber];\n    state.nextBlock = [...block];\n  }\n\n  for (let row = 0; row < state.currentBlock.length; row++) {\n    for (let column = 0; column < state.currentBlock[row].length; column++) {\n      if (grid[row][column + padding] > 0 && grid[row][column + padding] < 10)\n        state.gameOver = true;\n      grid[row][column + padding] = state.currentBlock[row][column];\n    }\n  }\n};\n\nconst copyGrid = grid =>\n  grid.map(arr => {\n    return arr.slice();\n  });\n\nfunction isEndTick(row, state, newGrid, column) {\n  return (\n    row === state.grid.length - 1 ||\n    (newGrid[row + 1][column] < 10 && newGrid[row + 1][column] > 0)\n  );\n}\n\nexport const doDrop = state => {\n  state.dropping = true;\n  while (state.dropping) {\n    state = doTick(state);\n  }\n  return {...state};\n};\nexport const doTick = state => {\n  localStorage.setItem(JELLY_TETRIS, JSON.stringify(state));\n  let newGrid = copyGrid(state.grid);\n  if (state.newBlock) {\n    createNewBlock(newGrid, state);\n    state.newBlock = false;\n    state.dropping = false;\n    if (!state.hold) state.canHold = true;\n    state.hold = false;\n    state.grid = newGrid;\n    setCurrentLocation(state);\n    return {...state};\n  }\n  for (let row = newGrid.length - 1; row >= 0; row--) {\n    for (let column = 0; column < newGrid[row].length; column++) {\n      if (newGrid[row][column] > 10) {\n        if (isEndTick(row, state, newGrid, column)) {\n          newGrid = copyGrid(state.grid);\n          state.newBlock = true;\n          // Remove Filled Block\n          for (let r = 0; r < newGrid.length; r++) {\n            const row = newGrid[r];\n            let filled = true;\n            for (let c = 0; c < row.length; c++) {\n              if (row[c] && row[c] > 10) row[c] -= 10;\n              if (!row[c]) filled = false;\n              if (filled && c === row.length - 1) {\n                removeLines(newGrid, r, state);\n              }\n            }\n          }\n          state.grid = newGrid;\n          return doTick(state);\n        }\n        newGrid[row + 1][column] = newGrid[row][column];\n        newGrid[row][column] = 0;\n      }\n    }\n  }\n\n  state.grid = newGrid;\n  setCurrentLocation(state);\n  return {...state};\n};\nconst removeLines = (grid, row, state) => {\n  grid.splice(row, 1);\n  grid.unshift(Array(10).fill(0));\n  state.removedLines += 1;\n  if (state.removedLines % 8 === 0) {\n    clearInterval(state.reservedTick);\n    state.levels += 1;\n    state.reservedTick = setInterval(() => {\n      tick();\n    }, 1000 * Math.pow(0.85, state.levels));\n  }\n};\nconst cellIsCurrentBlock = cell => {\n  return cell > 10;\n};\nexport const doMoveLeft = state => {\n  const newGrid = copyGrid(state.grid);\n  let needChange = true;\n  for (let r = newGrid.length - 1; r >= 0; r--) {\n    const row = newGrid[r];\n    for (let c = 0; c < row.length; c++) {\n      if (cellIsCurrentBlock(row[c])) {\n        if (row[c - 1] === 0) {\n          newGrid[r][c - 1] = newGrid[r][c];\n          newGrid[r][c] = 0;\n        } else {\n          needChange = false;\n        }\n      }\n    }\n  }\n\n  if (needChange) state.grid = newGrid;\n  setCurrentLocation(state);\n  return {...state};\n};\nexport const doMoveRight = state => {\n  const newGrid = copyGrid(state.grid);\n  let needChange = true;\n\n  for (let r = newGrid.length - 1; r >= 0; r--) {\n    const row = newGrid[r];\n    for (let c = row.length - 1; c >= 0; c--) {\n      if (cellIsCurrentBlock(row[c])) {\n        if (row[c + 1] === 0) {\n          const originValue = newGrid[r][c];\n          newGrid[r][c] = 0;\n          newGrid[r][c + 1] = originValue;\n        } else {\n          needChange = false;\n        }\n      }\n    }\n  }\n\n  if (needChange) state.grid = newGrid;\n  setCurrentLocation(state);\n  return {...state};\n};\nexport const doHold = (state) => {\n  if (!state.canHold) return {...state};\n  state.canHold = false;\n  state.hold = true;\n  for (let r = 0; r < state.grid.length; r++) {\n    for (let c = 0; c < state.grid[r].length; c++) {\n      if (state.grid[r][c] > 10) state.grid[r][c] = 0;\n    }\n  }\n\n  state.newBlock = true;\n  state = doTick(state);\n  state.holdBlock = tetriminos[state.temporaryHoldBlockNumber];\n  return state;\n};","import {handleActions} from \"redux-actions\";\nimport {DROP, HOLD, MOVE_LEFT, MOVE_RIGHT, RESET, ROTATE, TICK} from \"../tetris/types\";\nimport {doDrop, doHold, doMoveLeft, doMoveRight, doReset, doRotate, doTick, initialState} from \"../tetris/operations\";\n\n\nexport default handleActions(\n  {\n    [TICK]: state => doTick(state),\n    [MOVE_LEFT]: state => doMoveLeft(state),\n    [MOVE_RIGHT]: state => doMoveRight(state),\n    [ROTATE]: state => doRotate(state),\n    [DROP]: state => doDrop(state),\n    [RESET]: state => doReset(state),\n    [HOLD]: state => doHold(state)\n  },\n  initialState()\n);\n","import {combineReducers} from 'redux';\nimport tetrisReducer from \"./reducers/tetrisReducer\";\n\nconst createReducer = asyncReducers =>\n  combineReducers({\n    tetrisReducer,\n    ...asyncReducers\n  });\n\nexport default createReducer;","import { all, takeLatest, select, put } from \"redux-saga/effects\";\nimport {tick} from \"./tetris/actions\";\n\nconst delay = ms => new Promise(res => setTimeout(res, ms));\n\nexport function* tickSaga() {\n  const levels = yield select((state) => state.tetrisReducer.levels);\n\n  yield delay(1000 * Math.pow(0.85, levels));\n  yield put(tick());\n}\n\nexport function* watchTickSaga() {\n  yield takeLatest(\"WATCH_TICK\", () => tickSaga());\n}\n\nexport function* rootSaga() {\n  yield all([watchTickSaga()]);\n}\n","import { applyMiddleware, compose, createStore } from \"redux\";\nimport createReducer from \"./rootReducer\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { rootSaga } from \"./sagas\";\n\nconst initializeStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const store = createStore(\n    createReducer(),\n    compose(applyMiddleware(sagaMiddleware))\n  );\n  store.asyncReducers = {};\n\n  store.injectReducer = (key, reducer) => {\n    store.asyncReducers[key] = reducer;\n    store.replaceReducer(createReducer(store.asyncReducers));\n  };\n\n  sagaMiddleware.run(rootSaga);\n\n  return store;\n};\n\nexport default initializeStore;\n","import React from \"react\";\nimport './Row.scss'\n\nfunction Row(props) {\n  const { grid } = props;\n  const rows = [];\n\n  function column(row) {\n    let cells = [];\n    for (let column = 0; column < grid[row].length; column++) {\n      const keyName = `${row}-${column}`;\n      if (grid[row][column]) {\n        cells.push(\n          <span className={`cell fill-${grid[row][column]}`} key={keyName}>\n            &nbsp;\n          </span>\n        );\n      } else {\n        cells.push(\n          <span className=\"cell empty\" key={keyName}>\n            &nbsp;\n          </span>\n        );\n      }\n    }\n    return cells;\n  }\n\n  for (let row = 0; row < grid.length; row++) {\n    rows.push(\n      <div className=\"row\" key={row}>\n        {column(row)}\n      </div>\n    );\n  }\n\n  return rows;\n}\n\nexport default Row;\n","import React from \"react\";\nimport \"./GameOver.scss\";\n\nexport default () => <div id=\"game-over\">Game Over</div>;\n","import React from \"react\";\nimport \"./PlayView.scss\";\nimport Row from \"./Row\";\nimport GameOver from \"./GameOver\";\n\nfunction PlayView(props) {\n  const grid = props.grid;\n  props.tickTimer(props.levels);\n\n  document.onkeydown = e => {\n    if (e.key === \"ArrowLeft\") {\n      props.moveLeft();\n    }\n\n    if (e.key === \"ArrowRight\") {\n      props.moveRight();\n    }\n\n    if (e.key === \"ArrowDown\") {\n      props.tick();\n    }\n\n    if(e.key === \"ArrowUp\") {\n      props.rotate();\n    }\n\n    if(e.key === \" \") {\n      props.drop();\n    }\n\n    if(e.key === \"Shift\") {\n      props.hold();\n    }\n  };\n\n  return <div className=\"play-view\">{props.gameOver ? <GameOver /> : <Row grid={grid} />}</div>;\n}\n\n\nexport default PlayView;\n","import { connect } from \"react-redux\";\nimport * as terisActions from \"../tetris/actions\";\nimport PlayView from \"./PlayView\";\nimport React from \"react\";\n\nconst PlayViewContainer = props => {\n  const handleTick = () => {\n    props.tick();\n  };\n  const handleMoveLeft = () => {\n    props.moveLeft();\n  };\n  const handleMoveRight = () => {\n    props.moveRight();\n  };\n  const handleRotate = () => {\n    props.rotate();\n  };\n  const handleDrop = () => {\n    props.drop();\n  };\n\n  const tickTimer = levels => {\n    props.tickTimer(levels);\n  };\n\n  const handleHold = () => {\n    props.hold();\n  };\n\n  return (\n    <PlayView\n      tick={handleTick}\n      moveLeft={handleMoveLeft}\n      moveRight={handleMoveRight}\n      rotate={handleRotate}\n      drop={handleDrop}\n      tickTimer={tickTimer}\n      hold={handleHold}\n      grid={props.grid}\n      levels={props.levels}\n      gameOver={props.gameOver}\n      reservedTick={props.reservedTick}\n    />\n  );\n};\n\nexport default connect(\n  state => ({ ...state.tetrisReducer }),\n  dispatch => ({\n    tick: () => dispatch(terisActions.tick()),\n    moveLeft: () => dispatch(terisActions.moveLeft()),\n    moveRight: () => dispatch(terisActions.moveRight()),\n    rotate: () => dispatch(terisActions.rotate()),\n    drop: () => dispatch(terisActions.drop()),\n    tickTimer: levels => dispatch({ type: \"WATCH_TICK\", levels }),\n    hold: () => dispatch(terisActions.hold())\n  })\n)(PlayViewContainer);\n","import React from \"react\";\nimport \"./InformationWindow.scss\";\nimport Row from \"../playview/Row\";\n\nconst InformationWindow = props => {\n  const blockGird = block => {\n    const padding = 1;\n    const blockGrid = [\n      [0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0]\n    ];\n    for (let r = 0; r < block.length; r++) {\n      for (let c = 0; c < block[r].length; c++) {\n        blockGrid[r + padding][c + padding] = block[r][c];\n      }\n    }\n    return blockGrid;\n  };\n\n  return (\n    <div id=\"information-window\">\n      <Row grid={blockGird(props.nextBlock)} />\n      <div>NEXT</div>\n      <Row grid={blockGird(props.holdBlock)} />\n      <div>HOLD</div>\n\n      <div id=\"removed-lines\">Lines: {props.removedLines}</div>\n      <div id=\"levels\">Level: {props.levels}</div>\n      <button id=\"prevent-reset\" style={{ width: \"0px\", height: \"0px\" }} />\n      <button className=\"reset-button\" onClick={props.reset}>Reset</button>\n      <div id=\"audio-panel\">\n        <audio controls autoPlay={true} loop>\n          <source src=\"/jelly-tetris/tetris.ogg\" type=\"audio/ogg; codecs=vorbis\"/>\n        </audio>\n      </div>\n    </div>\n  );\n};\n\nexport default InformationWindow;\n","import { connect } from \"react-redux\";\nimport React from \"react\";\nimport InformationWindow from \"./InformationWindow\";\nimport * as tetrisActions from \"../tetris/actions\";\n\n\nconst InformationWindowContainer = props => {\n\n  const handleReset = () => {\n      props.reset();\n      document.getElementById(\"prevent-reset\").focus();\n  };\n\n  return (\n    <InformationWindow\n      nextBlock={props.nextBlock}\n      holdBlock={props.holdBlock}\n      removedLines={props.removedLines}\n      levels={props.levels}\n      reset={handleReset}\n    />\n  );\n};\n\n\nexport default connect(\n  state => ({...state.tetrisReducer }),\n  dispatch => ({\n    reset: () => dispatch(tetrisActions.reset())\n  })\n)(InformationWindowContainer);\n","import React from 'react';\nimport './App.css';\nimport initializeStore from \"./initializeStore\";\nimport {Provider} from \"react-redux\";\nimport PlayViewContainer from \"./playview/PlayViewContainer\";\nimport InformationWindowContainer from \"./information/InformationWindowContainer\";\n\n\nconst store = initializeStore();\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <PlayViewContainer />\n        <InformationWindowContainer />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}